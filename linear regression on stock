{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMSNMANWkZnQCkLzXw1zmNw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Annfreedajoy/Linear-regression-in-Machine-learning/blob/main/linear%20regression%20on%20stock\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "sWTCqGwDCkd3"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv('/ADANIENT.NS.csv')"
      ],
      "metadata": {
        "id": "4uYGK0APCsSo"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = dataset.iloc[:, :-1].values"
      ],
      "metadata": {
        "id": "Yw1t3UxkF2Or"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = dataset.iloc[:, -1].values"
      ],
      "metadata": {
        "id": "a7rhyiXGI33y"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(x, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "Q1d80UQuI8DE",
        "outputId": "86f2ac2e-ba84-49e9-bc4b-8246b4f33867"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = lin_reg.predict(x)"
      ],
      "metadata": {
        "id": "FdKIqWBVI_vp"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x, y, color = 'red')\n",
        "plt.plot(x, lin_reg.predict(x), color = 'blue')\n",
        "plt.xlabel('Package')\n",
        "plt.ylabel('Sales')\n",
        "plt.show()\n",
        "     "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "hZlWzBzyJEfH",
        "outputId": "3441dce6-f2d0-4a90-ada8-663b022fc4f2"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import PolynomialFeatures"
      ],
      "metadata": {
        "id": "ICAJz62YJXkJ"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "poly_reg = PolynomialFeatures(degree = 4)\n",
        "     "
      ],
      "metadata": {
        "id": "y3HwiNzaKEHQ"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_poly = poly_reg.fit_transform(x)"
      ],
      "metadata": {
        "id": "ipZ99LHJKHn5"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(x_poly, y)\n",
        "     "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "Ip-nFIDqKKvU",
        "outputId": "c1079526-1ef9-4b82-ece7-a27c28a6673b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x, y, color = 'red')\n",
        "plt.plot(x, lin_reg.predict(x_poly), color = 'blue')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "80APt1ywKN_o",
        "outputId": "e8ed17ad-b2d3-449c-fb99-a896c2807e52"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ff9729ed250>]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}